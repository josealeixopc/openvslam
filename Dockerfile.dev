# We choose Ubuntu 18.04 because it's the current development version
FROM ubuntu:18.04 as build

# Make sure we don' get prompts
ENV DEBIAN_FRONTEND noninteractive

# Update repositories
RUN apt-get update -y -qq && \
    apt-get upgrade -y -qq

# Install basic dependencies
RUN apt-get install -y -qq \
    cmake \
    curl \
    git \
    tar \
    unzip \
    wget

# Set version for Python code (must be >= 3.7)
ARG PYTHON_VERSION=3.7

# Install Python and pip
RUN apt-get install -y python${PYTHON_VERSION} python3-pip
RUN python${PYTHON_VERSION} -m pip install pip

# Set 'python' command to run the installed version
# We use dot '.' instead of 'source', because the default shell in Docker is 'sh' not 'bash'
RUN echo "alias python=python${PYTHON_VERSION}" >> ${HOME}/.bashrc && \
    . ${HOME}/.bashrc

# The following dependencies come from OpenVSlam Dockerfile:
# https://github.com/xdspacelab/openvslam/blob/master/Dockerfile.socket

### OPENVSLAM DEPENDENCIES BEGIN ###

# 'set -x' makes the console print all executed commands. 'set +x' disables this mode.
RUN set -x && \
    : "g2o dependencies" && \
    apt-get install -y -qq \
        libgoogle-glog-dev \
        libatlas-base-dev \
        libsuitesparse-dev \
        libglew-dev && \
    : "OpenCV dependencies" && \
    apt-get install -y -qq \
        libjpeg-dev \
        libpng++-dev \
        libtiff-dev \
        libopenexr-dev \
        libwebp-dev \
        ffmpeg \
        libavcodec-dev \
        libavformat-dev \
        libavutil-dev \
        libswscale-dev \
        libavresample-dev && \
    : "other dependencies" && \
    apt-get install -y -qq \
        libyaml-cpp-dev && \
    : "remove cache" && \
    apt-get autoremove -y -qq && \
    rm -rf /var/lib/apt/lists/*

ARG CMAKE_INSTALL_PREFIX=/usr/local

ENV CPATH=${CMAKE_INSTALL_PREFIX}/include:${CPATH}
ENV C_INCLUDE_PATH=${CMAKE_INSTALL_PREFIX}/include:${C_INCLUDE_PATH}
ENV CPLUS_INCLUDE_PATH=${CMAKE_INSTALL_PREFIX}/include:${CPLUS_INCLUDE_PATH}
ENV LIBRARY_PATH=${CMAKE_INSTALL_PREFIX}/lib:${LIBRARY_PATH}
ENV LD_LIBRARY_PATH=${CMAKE_INSTALL_PREFIX}/lib:${LD_LIBRARY_PATH}

# Eigen
ARG EIGEN3_VERSION=3.3.7
WORKDIR /tmp
RUN set -x && \
    wget -q https://gitlab.com/libeigen/eigen/-/archive/${EIGEN3_VERSION}/eigen-${EIGEN3_VERSION}.tar.bz2 && \
    tar xf eigen-${EIGEN3_VERSION}.tar.bz2 && \
    rm -rf eigen-${EIGEN3_VERSION}.tar.bz2 && \
    cd eigen-${EIGEN3_VERSION} && \
    mkdir -p build && \
    cd build && \
    cmake \
        -DCMAKE_BUILD_TYPE=Release \
        -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX} \
        .. && \
    make && \
    make install && \
    cd /tmp && \
    rm -rf *
ENV Eigen3_DIR=${CMAKE_INSTALL_PREFIX}/share/eigen3/cmake

# g2o
ARG G2O_COMMIT=9b41a4ea5ade8e1250b9c1b279f3a9c098811b5a
WORKDIR /tmp
RUN set -x && \
    git clone https://github.com/RainerKuemmerle/g2o.git && \
    cd g2o && \
    git checkout ${G2O_COMMIT} && \
    mkdir -p build && \
    cd build && \
    cmake \
        -DCMAKE_BUILD_TYPE=Release \
        -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX} \
        -DBUILD_SHARED_LIBS=ON \
        -DBUILD_UNITTESTS=OFF \
        -DBUILD_WITH_MARCH_NATIVE=OFF \
        -DG2O_USE_CHOLMOD=OFF \
        -DG2O_USE_CSPARSE=ON \
        -DG2O_USE_OPENGL=OFF \
        -DG2O_USE_OPENMP=ON \
        -DG2O_BUILD_APPS=OFF \
        -DG2O_BUILD_EXAMPLES=OFF \
        -DG2O_BUILD_LINKED_APPS=OFF \
        .. && \
    make && \
    make install && \
    cd /tmp && \
    rm -rf *
ENV g2o_DIR=${CMAKE_INSTALL_PREFIX}/lib/cmake/g2o

# OpenCV
ARG OPENCV_VERSION=4.1.0
WORKDIR /tmp
RUN set -x && \
    wget -q https://github.com/opencv/opencv/archive/${OPENCV_VERSION}.zip && \
    unzip -q ${OPENCV_VERSION}.zip && \
    rm -rf ${OPENCV_VERSION}.zip && \
    cd opencv-${OPENCV_VERSION} && \
    mkdir -p build && \
    cd build && \
    cmake \
        -DCMAKE_BUILD_TYPE=Release \
        -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX} \
        -DBUILD_DOCS=OFF \
        -DBUILD_EXAMPLES=OFF \
        -DBUILD_JASPER=OFF \
        -DBUILD_OPENEXR=OFF \
        -DBUILD_PERF_TESTS=OFF \
        -DBUILD_TESTS=OFF \
        -DBUILD_opencv_apps=OFF \
        -DBUILD_opencv_dnn=OFF \
        -DBUILD_opencv_ml=OFF \
        -DBUILD_opencv_python_bindings_generator=OFF \
        -DENABLE_CXX11=ON \
        -DENABLE_FAST_MATH=ON \
        -DWITH_EIGEN=ON \
        -DWITH_FFMPEG=ON \
        -DWITH_OPENMP=ON \
        .. && \
    make && \
    make install && \
    cd /tmp && \
    rm -rf *
ENV OpenCV_DIR=${CMAKE_INSTALL_PREFIX}/lib/cmake/opencv4

# DBoW2
ARG DBOW2_COMMIT=687fcb74dd13717c46add667e3fbfa9828a7019f
WORKDIR /tmp
RUN set -x && \
    git clone https://github.com/shinsumicco/DBoW2.git && \
    cd DBoW2 && \
    git checkout ${DBOW2_COMMIT} && \
    mkdir -p build && \
    cd build && \
    cmake \
        -DCMAKE_BUILD_TYPE=Release \
        -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX} \
        .. && \
    make && \
    make install && \
    cd /tmp && \
    rm -rf *
ENV DBoW2_DIR=${CMAKE_INSTALL_PREFIX}/lib/cmake/DBoW2

# socket.io-client-cpp
ARG SIOCLIENT_COMMIT=ff6ef08e45c594e33aa6bc19ebdd07954914efe0
WORKDIR /tmp
RUN set -x && \
    git clone https://github.com/shinsumicco/socket.io-client-cpp.git && \
    cd socket.io-client-cpp && \
    git checkout ${SIOCLIENT_COMMIT} && \
    git submodule init && \
    git submodule update && \
    mkdir -p build && \
    cd build && \
    cmake \
        -DCMAKE_BUILD_TYPE=Release \
        -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX} \
        -DBUILD_UNIT_TESTS=OFF \
        .. && \
    make && \
    make install && \
    cd /tmp && \
    rm -rf *
ENV sioclient_DIR=${CMAKE_INSTALL_PREFIX}/lib/cmake/sioclient

# protobuf
WORKDIR /tmp
RUN set -x && \
    apt-get update -y -qq && \
    apt-get upgrade -y -qq --no-install-recommends && \
    apt-get install -y -qq autogen autoconf libtool && \
    wget -q https://github.com/google/protobuf/archive/v3.6.1.tar.gz && \
    tar xf v3.6.1.tar.gz && \
    cd protobuf-3.6.1 && \
    ./autogen.sh && \
    ./configure --prefix=${CMAKE_INSTALL_PREFIX} --enable-static=no && \
    make && \
    make install && \
    cd /tmp && \
    rm -rf * && \
    apt-get purge -y -qq autogen autoconf libtool && \
    apt-get autoremove -y -qq && \
    rm -rf /var/lib/apt/lists/*

### OPENVSLAM DEPENDENCIES END ###

WORKDIR /openvslam/

ENTRYPOINT ["/bin/bash"]